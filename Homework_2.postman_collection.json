{
	"info": {
		"_postman_id": "4014092c-24e7-4170-9243-f59412e8d8d9",
		"name": "Homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29729790",
		"_collection_link": "https://www.postman.com/mylis84/workspace/qa-group-32/collection/29729790-4014092c-24e7-4170-9243-f59412e8d8d9?action=share&source=collection_link&creator=29729790"
	},
	"item": [
		{
			"name": "Task_1/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"  pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_1/first Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"  pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5006/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_2_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let req_f = request.data\r",
							"let resp_f = pm.response.json();\r",
							"// 3. Спарсить response body в json.\r",
							"let req_name = req_f.name\r",
							"let resp_name = resp_f.name\r",
							"let resp_age = +resp_f.age\r",
							"let req_age = +req_f.age\r",
							"let req_salary = +req_f.salary\r",
							"let resp_salary = +resp_f.salary\r",
							"let resp_salary_1_5_years = +resp_f.family.u_salary_1_5_year\r",
							"console.log(req_f)\r",
							"console.log(resp_name)\r",
							"console.log(\"req_age=\" + req_age)\r",
							"console.log(\"req_salary=\" + req_salary)\r",
							"console.log(req_name)\r",
							"console.log(resp_name)\r",
							"console.log(\"resp_age=\" +resp_f.age)\r",
							"console.log(\"resp_salary=\" +resp_f.salary)\r",
							"console.log(\"-------\"+resp_salary_1_5_years)\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check_name\", function () { \r",
							"    pm.expect(req_name).to.eql(\"Maryana\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Check_age\", function () { \r",
							"    pm.expect(req_age).to.eql(38);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check_salary\", function () { \r",
							"    pm.expect(req_salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"// let req_f = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Check_name\", function () { \r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check_age\", function () { \r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check_salary\", function () { \r",
							"    pm.expect(req_salary).to.eql(resp_salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(resp_f.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Check_u_salary_1.5_years\", function () { \r",
							"    pm.expect(req_salary*4).to.eql(resp_salary_1_5_years);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// let req_name = req_f.name\r",
							"\r",
							"// console.log (\"req_name\" = req_name)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// var req_body = request.data\r",
							"// var jsonData = pm.response.json();\r",
							"// var u_name = jsonData.family.children[0][0]\r",
							"\r",
							"\r",
							"// console.log(req_body.age)\r",
							"\r",
							"\r",
							"// pm.test(\"Your test name ==\" + u_name, function () {\r",
							"\r",
							"//   pm.expect(u_name).to.eql(\"Alex\");\r",
							"// })\r",
							"\r",
							"\r",
							"// console.log(u_name)\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Maryana",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_3_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json.\r",
							"let resp_url = pm.response.json();\r",
							"console.log(resp_url)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_url = pm.request.url.query.toObject()\r",
							"console.log(req_url)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = resp_url.name\r",
							"let req_name = req_url.name\r",
							"\r",
							"pm.test(\"Check_name\", function () { \r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"console.log(resp_name)\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let resp_age = +resp_url.age\r",
							"let req_age = +req_url.age\r",
							"\r",
							"pm.test(\"Check_age\", function () { \r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"console.log (resp_age)\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let resp_salary = +resp_url.salary\r",
							"let req_salary = +req_url.salary\r",
							"\r",
							"pm.test(\"Check_salary\", function () { \r",
							"    pm.expect(req_salary).to.eql(resp_salary);\r",
							"});\r",
							"console.log (resp_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(resp_url.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"let resp_f = pm.response.json();\r",
							"let dog_name = resp_f.family.pets.dog.name\r",
							"\r",
							"console.log(dog_name)\r",
							"\r",
							"pm.test(\"Check_dog_have_name\", function () { \r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"let dog_age = resp_f.family.pets.dog.age\r",
							"\r",
							"console.log(dog_age)\r",
							"\r",
							"pm.test(\"Check_dog_have_age\", function () { \r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Dog_name_Luky\", function () { \r",
							"    pm.expect(resp_f.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Dog_age_4\", function () { \r",
							"    pm.expect(resp_f.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Maryana&age=38&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Maryana"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_4_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3. Спарсить response body в json.\r",
							"let resp_url = pm.response.json();\r",
							"console.log(resp_url)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_url = pm.request.url.query.toObject()\r",
							"console.log(req_url)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let resp_name = resp_url.name\r",
							"let req_name = req_url.name\r",
							"\r",
							"pm.test(\"Check_name\", function () { \r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"\r",
							"console.log(resp_name)\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"let resp_age = +resp_url.age\r",
							"let req_age = +req_url.age\r",
							"\r",
							"pm.test(\"Check_age\", function () { \r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"console.log (resp_age)\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req_url.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp_url.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp_url.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_url.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_url.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let resp_salary_0 = resp_url.salary[0]\r",
							"let req_salary = +req_url.salary\r",
							"\r",
							"\r",
							"pm.test(\"Check_salary\", function () { \r",
							"    pm.expect(resp_salary_0).to.eql(req_salary);\r",
							"});\r",
							"console.log (resp_salary_0)\r",
							"\r",
							"\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let resp_salary_1 = req_salary*2\r",
							"\r",
							"pm.test(\"Check_salary_1\", function () { \r",
							"    pm.expect(resp_salary_1).to.eql(req_salary*2);\r",
							"});\r",
							"console.log (resp_salary_1)\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"let resp_salary_2 = req_salary*3\r",
							"\r",
							"pm.test(\"Check_salary_2\", function () { \r",
							"    pm.expect(resp_salary_2).to.eql(req_salary*3);\r",
							"});\r",
							"console.log (resp_salary_2)\r",
							"\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"person_name = jsonData.name\r",
							"console.log(person_name)\r",
							"\r",
							"pm.environment.set(\"name\", person_name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"\r",
							"// let jsonData = pm.response.json();\r",
							"person_age = jsonData.age\r",
							"console.log(person_age)\r",
							"\r",
							"pm.environment.set(\"age\", person_age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"person_salary = jsonData.salary\r",
							"console.log(person_salary)\r",
							"\r",
							"pm.environment.set(\"salary\",1000);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Maryana&age=38&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Maryana"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_5_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// {{salary}}\r",
							"\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// {{age}}\r",
							"\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// {{name}}\r",
							"\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"console.log(resp_f)\r",
							"// let req_name = req_f.name\r",
							"// let resp_name = resp_f.name\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req_f = request.data\r",
							"console.log(req_f)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Check start_qa_salary param\", function (){\r",
							"    pm.expect(JSON.stringify(resp_f)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// let resp_f = pm.response.json();\r",
							"// let dog_name = resp_f.family.pets.dog.name\r",
							"\r",
							"// console.log(dog_name)\r",
							"\r",
							"// pm.test(\"Check_dog_have_name\", function () { \r",
							"//     pm.expect(resp_f.family.pets.dog).to.have.property(\"name\");\r",
							"// });\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check qa_salary_after_6_months param\", function (){\r",
							"    pm.expect(JSON.stringify(resp_f)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Check qa_salary_after_12_months param\", function (){\r",
							"    pm.expect(JSON.stringify(resp_f)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check qa_salary_after_1.5_year param\", function (){\r",
							"    pm.expect(JSON.stringify(resp_f)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check qa_salary_after_3.5_years param\", function (){\r",
							"    pm.expect(JSON.stringify(resp_f)).to.include(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check person param\", function (){\r",
							"    pm.expect(JSON.stringify(resp_f)).to.include(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"// Parse the JSON response\r",
							"// var jsonData = pm.response.json();\r",
							"\r",
							"// Extract the salary from the request\r",
							"// var salaryFromRequest = pm.request.json().start_qa_salary;\r",
							"\r",
							"// Check if start_qa_salary is equal to salary from the request\r",
							"// pm.test(\"Check if start_qa_salary is equal to salary from the request\", function () {\r",
							"//     pm.expect(jsonData.person.start_qa_salary).to.equal(salaryFromRequest);\r",
							"// });\r",
							"\r",
							"// let resp_salary = resp_f.salary\r",
							"let req_salary = +req_f.salary\r",
							"let resp_start_qa_salary = +resp_f.start_qa_salary\r",
							"// console.log(+req_start_qa_salary)\r",
							"console.log(+resp_start_qa_salary)\r",
							"// console.log(\"req_start_qa_salary=\" +req_start_qa_salary)\r",
							"console.log(\"resp_start_qa_salary=\" +resp_start_qa_salary)\r",
							"console.log(\"resp_start_qa_salary = \" +typeof resp_start_qa_salary)\r",
							"\r",
							"pm.test(\"Check start_qa_salary\", function () { \r",
							"    pm.expect(person.resp_start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}